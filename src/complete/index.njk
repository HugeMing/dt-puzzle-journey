{% extends "src/_base.njk" %}

{% block content %}
    <div id="complete-page" class="pb-8">
        <div class="container p-2">
            <div class="text-center">
                <p id="complete-message" class="narrative-text">
                    Ko te kairapu ko ia te kite<br>
                    He (she) who seeks will find
                </p>
            </div>
            <div class="grid grid-cols-3 gap-4 justify-items-center">
                <div class="col-span-3">
                    <p>
                        The three types of puzzles that you completed on your journey are all examples of important concepts that are in the new and revised Digital Technologies curriculum content.
                    </p>
                </div>
                <div class="puzzle-box col-span-3 md:col-span-2 lg:col-span-1">
                    <h2 class="text-center mb-2">Forest Message</h2>
                    <img src="/img/screenshot-fern-message.png">
                    <p>
                        The puzzle with the silver ferns gets to the heart of why use the word “digital” when talking about digital devices, digital photos, digital natives and so on! The activity shows how messages are stored or transmitted digitally using just two values.
                    </p>
                    <p>
                        In the puzzle the two values were the green and silver side of the ferns, but on digital devices we often refer to the two values as the digits 0 and 1, and these are the “digits” that being digital is all about. Representing text (or pictures, or sound, or video, or anything else) using this idea is called “binary representation”, and you’ll find it in <a href="https://nzcurriculum.tki.org.nz/The-New-Zealand-Curriculum/Technology/Progress-outcomes#collapsible1">Progress Outcomes 3, 4, and 5 in Computational Thinking for Digital Technologies</a>.
                    </p>
                    <a href="/index.njk?stage=fern-interactive&autostart" class="button">Link to fern puzzle</a>
                </div>
                <div class="puzzle-box col-span-3 md:col-span-2 lg:col-span-1">
                    <h2 class="text-center mb-2">River Crossing</h2>
                    <img src="/img/screenshot-river-crossing.png">
                    <p>
                        The river crossing puzzle where you joined rope lengths is an example of a common problem that computer scientists still haven’t figured out how to solve efficiently on a computer! For a small number of pieces of rope, a computer program can just try out lots of possibilities, but once you get a decent number of pieces, the time taken grows exponentially - even a fast computer can take thousands of years to try out all the possibilities.
                    </p>
                    <p>
                        The general problem is called “bin packing”, and it comes up when we’re trying to load freight onto vehicles with a limited capacity, or cut up lengths of steel to particular sizes. You’d think someone could find a fast algorithm to work out the best solution, but no-one has, even though there’s a million dollar prize for finding a solution.
                    </p>
                    <p>
                        There are hundreds of problems like this that are referred to as “intractable” - they take too long for computers to solve. You’ll find the topic of tractability in <a href="https://nzcurriculum.tki.org.nz/The-New-Zealand-Curriculum/Technology/Progress-outcomes#collapsible1">Progress Outcome 7 in Computational Thinking for Digital Technologies</a> - it’s usually explored in NCEA level 2.
                    </p>
                    <a href="/index.njk?stage=river-crossing&autostart" class="button">Link to river crossing puzzle</a>
                </div>
                <div class="puzzle-box col-span-3 md:col-span-2 lg:col-span-1">
                    <h2 class="text-center mb-2">Navigating Plains</h2>
                    <img src="/img/screenshot-plains.png">
                    <p>
                        The final puzzle, moving around on the grid using simple forward/left/right commands, is a popular way to introduce the idea of computer programming (or “coding” as it’s sometimes referred to). While moving on a grid isn’t a proper programming language, it provides a vocabulary of unambiguous instructions that gives students experience giving commands that will be followed precisely, and allows them to test if they work correctly.
                    </p>
                    <p>
                        When the instructions don’t do what was intended, students need to develop the resilience to track down what is wrong (a “bug”), and try again with revised instructions. The idea of breaking “simple non-computerised tasks into precise, unambiguous, step-by-step instructions” and “simple debugging” comes from <a href="https://nzcurriculum.tki.org.nz/The-New-Zealand-Curriculum/Technology/Progress-outcomes#collapsible1">Progress Outcome 1 in Computational Thinking for Digital Technologies</a>.
                    </p>
                    <a href="/index.njk?stage=plains&autostart" class="button">Link to plains puzzle</a>
                </div>
                <div class="col-span-3">
                    <p class="text-center">
                        Thanks for joining us on this digital journey.<br>
                        If you solved the puzzles, then you’ve engaged with some of the biggest ideas in computing!
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
